
uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094a  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f4  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	4e c0       	rjmp	.+156    	; 0x138 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
/* Replace with your application code */
unsigned char rx_data;
DDRA = 0XFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
PORTE = 0XFF;
  a2:	83 b9       	out	0x03, r24	; 3

UBRR0H = 103>>8;
  a4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L = 103;
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	89 b9       	out	0x09, r24	; 9
UCSR0A = 0X00;
  ac:	1b b8       	out	0x0b, r1	; 11
UCSR0B = 0X18;
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	8a b9       	out	0x0a, r24	; 10
UCSR0C = 0X06;
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
rx_data = UDR0;
  b8:	8c b1       	in	r24, 0x0c	; 12

while (1)
{
while(!(UCSR0A & 0X80));
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <main+0x1c>
	rx_data = UDR0;
  be:	8c b1       	in	r24, 0x0c	; 12
	if(rx_data == 'y'){
  c0:	89 37       	cpi	r24, 0x79	; 121
  c2:	69 f4       	brne	.+26     	; 0xde <main+0x40>
		PORTA |= (1<<7);
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e3       	ldi	r24, 0x3F	; 63
  cc:	9c e9       	ldi	r25, 0x9C	; 156
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x30>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x36>
  d4:	00 00       	nop
		_delay_ms(10);
		PORTA &= ~(1<<7);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	ee cf       	rjmp	.-36     	; 0xba <main+0x1c>
	}
	else if(rx_data == 'b'){
  de:	82 36       	cpi	r24, 0x62	; 98
  e0:	69 f4       	brne	.+26     	; 0xfc <main+0x5e>
		PORTA |= (1<<5);
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9c e9       	ldi	r25, 0x9C	; 156
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x4e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x54>
  f2:	00 00       	nop
		_delay_ms(10);
		PORTA &= ~(1<<5);
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	8f 7d       	andi	r24, 0xDF	; 223
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	df cf       	rjmp	.-66     	; 0xba <main+0x1c>
	}
	else if(rx_data == 'j'){
  fc:	8a 36       	cpi	r24, 0x6A	; 106
  fe:	69 f4       	brne	.+26     	; 0x11a <main+0x7c>
		PORTA |= (1<<3);
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	88 60       	ori	r24, 0x08	; 8
 104:	8b bb       	out	0x1b, r24	; 27
 106:	8f e3       	ldi	r24, 0x3F	; 63
 108:	9c e9       	ldi	r25, 0x9C	; 156
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x6c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x72>
 110:	00 00       	nop
		_delay_ms(10);
		PORTA &= ~(1<<3);
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	8b bb       	out	0x1b, r24	; 27
 118:	d0 cf       	rjmp	.-96     	; 0xba <main+0x1c>
	}
	else if(rx_data == 'g'){
 11a:	87 36       	cpi	r24, 0x67	; 103
 11c:	71 f6       	brne	.-100    	; 0xba <main+0x1c>
		PORTA |= (1<<1);
 11e:	8b b3       	in	r24, 0x1b	; 27
 120:	82 60       	ori	r24, 0x02	; 2
 122:	8b bb       	out	0x1b, r24	; 27
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9c e9       	ldi	r25, 0x9C	; 156
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x8a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x90>
 12e:	00 00       	nop
		_delay_ms(10);
		PORTA &= ~(1<<1);
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8b bb       	out	0x1b, r24	; 27
 136:	c1 cf       	rjmp	.-126    	; 0xba <main+0x1c>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
