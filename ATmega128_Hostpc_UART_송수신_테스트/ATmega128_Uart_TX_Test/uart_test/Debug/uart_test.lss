
uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e9  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082e  00000000  00000000  00000ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  000012f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004a  00000000  00000000  00001a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0b d0       	rcall	.+22     	; 0xb0 <main>
  9a:	2b c0       	rjmp	.+86     	; 0xf2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Puts_Dist>:
#include <util/delay.h>
#include <stdio.h>
#include <string.h>

void Puts_Dist(unsigned short data){
	while((UCSR0A & 0x20)==0x00); // 송신버퍼가 비워지면 while문 탈출
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <Puts_Dist>
	UDR0=data; // 데이터 송신
  a2:	8c b9       	out	0x0c, r24	; 12
	
	UCSR1A |= 0x20;         // 클리어 UDRE0
  a4:	eb e9       	ldi	r30, 0x9B	; 155
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <main>:
}

int main(void)
{
	/* Replace with your application code */
	DDRA = 0XFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a bb       	out	0x1a, r24	; 26
	PORTE = 0XFF;
  b4:	83 b9       	out	0x03, r24	; 3
	
	UBRR0H = 103>>8; // 보레이트 : 9600bps 설정
  b6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 103;    // 보레이트 : 9600bps 설정
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	89 b9       	out	0x09, r24	; 9
	UCSR0A = 0X00;
  be:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0X18;
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0X06;
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	unsigned short n= 30;
  ca:	ce e1       	ldi	r28, 0x1E	; 30
  cc:	d0 e0       	ldi	r29, 0x00	; 0
	// 30, 31, 32 ... 39, 40, 30, 31 ... : 데이터를 1초 주기로 hostpc로 송신
	while (1)
	{
		Puts_Dist(n);
  ce:	ce 01       	movw	r24, r28
  d0:	e6 df       	rcall	.-52     	; 0x9e <Puts_Dist>
		n++;
  d2:	21 96       	adiw	r28, 0x01	; 1
		if(n == 41){
  d4:	c9 32       	cpi	r28, 0x29	; 41
  d6:	d1 05       	cpc	r29, r1
  d8:	11 f4       	brne	.+4      	; 0xde <main+0x2e>
			n = 30;
  da:	ce e1       	ldi	r28, 0x1E	; 30
  dc:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	83 ed       	ldi	r24, 0xD3	; 211
  e2:	90 e3       	ldi	r25, 0x30	; 48
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x34>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x3e>
  ee:	00 00       	nop
  f0:	ee cf       	rjmp	.-36     	; 0xce <main+0x1e>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
